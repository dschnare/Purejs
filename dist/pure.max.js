!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Pure=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global) {
  'use strict';

  function ck(constructor, prototypeProperties, prototypeChain) {
    if (arguments.length === 1) {
      prototypeProperties = {};
    } else if (arguments.length === 2) {
      prototypeChain = prototypeProperties;
      prototypeProperties = {};
    }

    prototypeProperties = prototypeProperties || {};

    if (typeof prototypeChain === 'function') {
      constructor.prototype = ck.create(prototypeChain.prototype);
      ck.mixin(constructor.prototype, prototypeProperties);
    } else if (prototypeChain) {
      constructor.prototype = ck.create(prototypeChain);
      ck.mixin(constructor.prototype, prototypeProperties);
    } else {
      constructor.prototype = ck.mixin({}, prototypeProperties);
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  }

  ck.create = Object.create || function (o) {
    function F() { this.constructor = F; }
    F.prototype = o;
    return new F();
  };

  ck.mixin = function (dest) {
    var k, obj, objs;

    objs = [].slice.call(arguments, 1);
    while (objs.length) {
      obj = objs.shift();

      for (k in obj) {
        if (obj.hasOwnProperty(k)) {
          dest[k] = obj[k];
        }
      }
    }

    return dest;
  };

  if (typeof exports === 'object' && exports) {
    exports.ck = ck;
    exports.constructorKit = ck;
  } else if (typeof define === 'function' && define.amd) {
    define([], function () {
      return {ck: ck, constructorKit: ck};
    });
  } else {
    global.ck = ck;
    global.constructorKit = ck;
  }
}(this));
},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
'use strict';
var adheresTo, ck, create, isArray, isBoolean, isDefined, isFunction, isNumber, isObject, isPrimitive, isString, isUndefined, mixin, typeOf,
  __slice = [].slice;

ck = require('constructor-kit');

create = function(o) {
  var F;
  if (isPrimitive(o)) {
    o = new o.constructor(o);
  }
  F = (function() {
    function F() {
      this.constructor = F;
    }

    return F;

  })();
  F.prototype = o;
  return new F;
};

isString = function(o) {
  return typeof o === 'string' || o instanceof String;
};

isBoolean = function(o) {
  return typeof o === 'boolean' || o instanceof Boolean;
};

isNumber = function(o) {
  return typeof o === 'number' || o instanceof Number;
};

isFunction = function(o) {
  return typeof o === 'function';
};

isPrimitive = function(o) {
  return /string|number|boolean/.test(typeof o);
};

isDefined = function(o) {
  return o !== null && o !== void 0;
};

isUndefined = function(o) {
  return o === null || o === void 0;
};

isArray = function(o) {
  return o instanceof Array || Object.prototype.toString.call(o) === '[object Array]';
};

isObject = function(o) {
  return o === Object(o) && typeof o !== 'function';
};

typeOf = function(o) {
  if (o === null) {
    return 'null';
  }
  if (isArray(o)) {
    return 'array';
  }
  return typeof o;
};

mixin = function() {
  var k, o, obj, objs, v, _i, _len;
  o = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (o == null) {
    throw new Error('Expected at least one object as an argument.');
  }
  for (_i = 0, _len = objs.length; _i < _len; _i++) {
    obj = objs[_i];
    if (isDefined(obj)) {
      for (k in obj) {
        v = obj[k];
        if (obj.hasOwnProperty(k)) {
          o[k] = obj[k];
        }
      }
    }
  }
  return o;
};

adheresTo = function(o, interfce) {
  var k, v;
  if ((isObject(o) || isFunction(o) || isArray(o)) && (isObject(interfce) || isFunction(interfce) || isArray(interfce))) {
    for (k in interfce) {
      v = interfce[k];
      if (interfce.hasOwnProperty(k)) {
        if (interfce[k] === '*') {
          if (o[k] === void 0) {
            return false;
          }
        } else {
          if (!(typeOf(o[k]) === typeOf(interfce[k]) || typeOf(o[k]) === interfce[k])) {
            return false;
          }
        }
      }
    }
    return true;
  }
  return typeOf(o) === typeOf(interfce);
};

module.exports = {
  create: create,
  isString: isString,
  isBoolean: isBoolean,
  isNumber: isNumber,
  isFunction: isFunction,
  isPrimitive: isPrimitive,
  isDefined: isDefined,
  isUndefined: isUndefined,
  isArray: isArray,
  isObject: isObject,
  typeOf: typeOf,
  mixin: mixin,
  adheresTo: adheresTo,
  constructor: {
    create: ck.ck
  }
};

},{"constructor-kit":1}]},{},[2])(2)
});
//# sourceMappingURL=data:application/json;base64,
